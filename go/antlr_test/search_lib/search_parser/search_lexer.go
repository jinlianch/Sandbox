// Code generated from SearchLexer.g4 by ANTLR 4.7.2. DO NOT EDIT.

package search_parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 152,
	8, 1, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6,
	4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12,
	9, 12, 4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9,
	17, 4, 18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22,
	3, 2, 3, 2, 3, 2, 5, 2, 50, 10, 2, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 56, 10,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 62, 10, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3,
	7, 3, 7, 7, 7, 70, 10, 7, 12, 7, 14, 7, 73, 11, 7, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 87, 10, 8, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 5, 12, 107, 10, 12, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3,
	16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 6, 20, 128, 10, 20,
	13, 20, 14, 20, 129, 3, 20, 3, 20, 3, 21, 6, 21, 135, 10, 21, 13, 21, 14,
	21, 136, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 7, 22, 144, 10, 22, 12, 22,
	14, 22, 147, 11, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 145, 2, 23, 4, 3, 6,
	4, 8, 5, 10, 6, 12, 7, 14, 8, 16, 9, 18, 10, 20, 11, 22, 2, 24, 2, 26,
	2, 28, 2, 30, 2, 32, 2, 34, 2, 36, 2, 38, 2, 40, 12, 42, 13, 44, 14, 4,
	2, 3, 13, 6, 2, 47, 47, 67, 92, 97, 97, 99, 124, 7, 2, 47, 47, 50, 59,
	67, 92, 97, 97, 99, 124, 5, 2, 11, 12, 15, 15, 34, 34, 10, 2, 36, 36, 49,
	49, 94, 94, 100, 100, 104, 104, 112, 112, 116, 116, 118, 118, 5, 2, 50,
	59, 67, 72, 99, 104, 4, 2, 67, 67, 99, 99, 4, 2, 70, 70, 102, 102, 4, 2,
	71, 71, 103, 103, 4, 2, 74, 74, 106, 106, 4, 2, 84, 84, 116, 116, 6, 2,
	11, 12, 15, 15, 34, 34, 36, 36, 2, 152, 2, 4, 3, 2, 2, 2, 2, 6, 3, 2, 2,
	2, 2, 8, 3, 2, 2, 2, 2, 10, 3, 2, 2, 2, 2, 12, 3, 2, 2, 2, 2, 14, 3, 2,
	2, 2, 2, 16, 3, 2, 2, 2, 2, 18, 3, 2, 2, 2, 2, 20, 3, 2, 2, 2, 2, 22, 3,
	2, 2, 2, 2, 40, 3, 2, 2, 2, 3, 42, 3, 2, 2, 2, 3, 44, 3, 2, 2, 2, 4, 49,
	3, 2, 2, 2, 6, 55, 3, 2, 2, 2, 8, 61, 3, 2, 2, 2, 10, 63, 3, 2, 2, 2, 12,
	65, 3, 2, 2, 2, 14, 67, 3, 2, 2, 2, 16, 86, 3, 2, 2, 2, 18, 88, 3, 2, 2,
	2, 20, 93, 3, 2, 2, 2, 22, 98, 3, 2, 2, 2, 24, 103, 3, 2, 2, 2, 26, 108,
	3, 2, 2, 2, 28, 114, 3, 2, 2, 2, 30, 116, 3, 2, 2, 2, 32, 118, 3, 2, 2,
	2, 34, 120, 3, 2, 2, 2, 36, 122, 3, 2, 2, 2, 38, 124, 3, 2, 2, 2, 40, 127,
	3, 2, 2, 2, 42, 134, 3, 2, 2, 2, 44, 140, 3, 2, 2, 2, 46, 47, 7, 81, 2,
	2, 47, 50, 7, 84, 2, 2, 48, 50, 7, 126, 2, 2, 49, 46, 3, 2, 2, 2, 49, 48,
	3, 2, 2, 2, 50, 5, 3, 2, 2, 2, 51, 52, 7, 80, 2, 2, 52, 53, 7, 81, 2, 2,
	53, 56, 7, 86, 2, 2, 54, 56, 7, 47, 2, 2, 55, 51, 3, 2, 2, 2, 55, 54, 3,
	2, 2, 2, 56, 7, 3, 2, 2, 2, 57, 58, 7, 67, 2, 2, 58, 59, 7, 80, 2, 2, 59,
	62, 7, 70, 2, 2, 60, 62, 7, 40, 2, 2, 61, 57, 3, 2, 2, 2, 61, 60, 3, 2,
	2, 2, 62, 9, 3, 2, 2, 2, 63, 64, 7, 42, 2, 2, 64, 11, 3, 2, 2, 2, 65, 66,
	7, 43, 2, 2, 66, 13, 3, 2, 2, 2, 67, 71, 9, 2, 2, 2, 68, 70, 9, 3, 2, 2,
	69, 68, 3, 2, 2, 2, 70, 73, 3, 2, 2, 2, 71, 69, 3, 2, 2, 2, 71, 72, 3,
	2, 2, 2, 72, 15, 3, 2, 2, 2, 73, 71, 3, 2, 2, 2, 74, 75, 7, 37, 2, 2, 75,
	87, 5, 14, 7, 2, 76, 77, 5, 36, 18, 2, 77, 78, 5, 34, 17, 2, 78, 79, 5,
	30, 15, 2, 79, 80, 5, 32, 16, 2, 80, 81, 5, 34, 17, 2, 81, 82, 5, 38, 19,
	2, 82, 83, 7, 93, 2, 2, 83, 84, 5, 14, 7, 2, 84, 85, 7, 95, 2, 2, 85, 87,
	3, 2, 2, 2, 86, 74, 3, 2, 2, 2, 86, 76, 3, 2, 2, 2, 87, 17, 3, 2, 2, 2,
	88, 89, 5, 14, 7, 2, 89, 90, 7, 60, 2, 2, 90, 91, 3, 2, 2, 2, 91, 92, 8,
	9, 2, 2, 92, 19, 3, 2, 2, 2, 93, 94, 5, 16, 8, 2, 94, 95, 7, 60, 2, 2,
	95, 96, 3, 2, 2, 2, 96, 97, 8, 10, 2, 2, 97, 21, 3, 2, 2, 2, 98, 99, 10,
	4, 2, 2, 99, 100, 3, 2, 2, 2, 100, 101, 8, 11, 3, 2, 101, 102, 8, 11, 2,
	2, 102, 23, 3, 2, 2, 2, 103, 106, 7, 94, 2, 2, 104, 107, 9, 5, 2, 2, 105,
	107, 5, 26, 13, 2, 106, 104, 3, 2, 2, 2, 106, 105, 3, 2, 2, 2, 107, 25,
	3, 2, 2, 2, 108, 109, 7, 119, 2, 2, 109, 110, 5, 28, 14, 2, 110, 111, 5,
	28, 14, 2, 111, 112, 5, 28, 14, 2, 112, 113, 5, 28, 14, 2, 113, 27, 3,
	2, 2, 2, 114, 115, 9, 6, 2, 2, 115, 29, 3, 2, 2, 2, 116, 117, 9, 7, 2,
	2, 117, 31, 3, 2, 2, 2, 118, 119, 9, 8, 2, 2, 119, 33, 3, 2, 2, 2, 120,
	121, 9, 9, 2, 2, 121, 35, 3, 2, 2, 2, 122, 123, 9, 10, 2, 2, 123, 37, 3,
	2, 2, 2, 124, 125, 9, 11, 2, 2, 125, 39, 3, 2, 2, 2, 126, 128, 9, 4, 2,
	2, 127, 126, 3, 2, 2, 2, 128, 129, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 129,
	130, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 132, 8, 20, 4, 2, 132, 41,
	3, 2, 2, 2, 133, 135, 10, 12, 2, 2, 134, 133, 3, 2, 2, 2, 135, 136, 3,
	2, 2, 2, 136, 134, 3, 2, 2, 2, 136, 137, 3, 2, 2, 2, 137, 138, 3, 2, 2,
	2, 138, 139, 8, 21, 5, 2, 139, 43, 3, 2, 2, 2, 140, 145, 7, 36, 2, 2, 141,
	144, 5, 24, 12, 2, 142, 144, 11, 2, 2, 2, 143, 141, 3, 2, 2, 2, 143, 142,
	3, 2, 2, 2, 144, 147, 3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 145, 143, 3, 2,
	2, 2, 146, 148, 3, 2, 2, 2, 147, 145, 3, 2, 2, 2, 148, 149, 7, 36, 2, 2,
	149, 150, 3, 2, 2, 2, 150, 151, 8, 22, 5, 2, 151, 45, 3, 2, 2, 2, 14, 2,
	3, 49, 55, 61, 71, 86, 106, 129, 136, 143, 145, 6, 7, 3, 2, 5, 2, 2, 8,
	2, 2, 6, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE", "PAIRMODE",
}

var lexerLiteralNames = []string{
	"", "", "", "", "'('", "')'",
}

var lexerSymbolicNames = []string{
	"", "OR", "NOT", "AND", "LP", "RP", "FIELD", "HEADER", "FIELD_START", "HEADER_START",
	"WS", "NOQUOTE_STRING", "QUOTE_STRING",
}

var lexerRuleNames = []string{
	"OR", "NOT", "AND", "LP", "RP", "FIELD", "HEADER", "FIELD_START", "HEADER_START",
	"VALUE_START", "ESC", "UNICODE", "HEX", "A", "D", "E", "H", "R", "WS",
	"NOQUOTE_STRING", "QUOTE_STRING",
}

type SearchLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewSearchLexer(input antlr.CharStream) *SearchLexer {

	l := new(SearchLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "SearchLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SearchLexer tokens.
const (
	SearchLexerOR             = 1
	SearchLexerNOT            = 2
	SearchLexerAND            = 3
	SearchLexerLP             = 4
	SearchLexerRP             = 5
	SearchLexerFIELD          = 6
	SearchLexerHEADER         = 7
	SearchLexerFIELD_START    = 8
	SearchLexerHEADER_START   = 9
	SearchLexerWS             = 10
	SearchLexerNOQUOTE_STRING = 11
	SearchLexerQUOTE_STRING   = 12
)

// SearchLexerPAIRMODE is the SearchLexer mode.
const SearchLexerPAIRMODE = 1
